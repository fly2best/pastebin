
happens-before关系,不要求提前执行.

这里 A happens- before B,但实际执行时 B 却可以排在 A 之前执行(看上面的
重排序后的执行顺序)。在第一章提到过,如果 A happens- before B,JMM 并
不要求 A 一定要在 B 之前执行。JMM 仅仅要求前一个操作(执行的结果)对后一
个操作可见,且前一个操作按顺序排在第二个操作之前。这里操作 A 的执行结果不
需要对操作 B 可见;而且重排序操作 A 和操作 B 后的执行结果,与操作 A 和操作
B 按 happens- before 顺序执行的结果一致。在这种情况下,JMM 会认为这种重
排序并不非法(not illegal),JMM 允许这种重排序。
在计算机中,软件技术和硬件技术有一个共同的目标:在不改变程序执行结果的前
提下,尽可能的开发并行度。编译器和处理器遵从这一目标,从 happens- before
的定义我们可以看出,JMM 同样遵从这一目标。


猜测执行
在程序中,操作 3 和操作 4 存在控制依赖关系。当代码中存在控制依赖性时,会影
响指令序列执行的并行度。为此,编译器和处理器会采用猜测(Speculation)执
行来克服控制相关性对并行度的影响。以处理器的猜测执行为例,执行线程 B 的处
理器可以提前读取并计算 a*a,然后把计算结果临时保存到一个名为重排序缓冲
(reorder buffer ROB)的硬件缓存中。当接下来操作 3 的条件判断为真时,就把
该计算结果写入变量 i 中。
从图中我们可以看出,猜测执行实质上对操作 3 和 4 做了重排序。重排序在这里破
坏了多线程程序的语义!
