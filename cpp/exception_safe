
异常安全

有几个level
1. 基本保证:
    即使抛出了异常, 没有造成资源泄漏, 程序仍处于一致性状态, 不会异常终止.
2. 强保证:
    如果因为某个操作由于抛出异常而终止, 那么程序的状态应该保证"commit-or-rollback"的语义.
3. 无异常爆出保证: 
    无论在什么情况下, 函数都不会出现异常

异常安全的前两个原则是事物的一致性和原子性, 是不是相通的.


异常中立原则:
如果在函数库中因调用user的代码, 而抛出异常, 这个异常应该原封不动的转发给用户代码.

在多线程环境下
如果用如果用线程去执行一个函数, 这个函数如果发生异常, 应该通知调用线程.
一般有两种方法
1. 异常应该在线程间转发.
    不是在执行线程直接抛出, 而是要转发到调用线程, 让调用线程知悉.
    std::async, std::promise,  std::packaged_task, std::future
    这些类可以用来解决线程间的异常传递.

2. 要设置一个标志, 要让调用线程知道出现了异常.
